# roles/docker/tasks/main.yml

# Hardened Docker setup for n8n on Ubuntu 24.04

- name: Install prerequisites for Docker repository
  apt:
    name:
      - ca-certificates
      - curl
      - gnupg
    state: present
    update_cache: yes
  become: true

- name: Ensure /etc/apt/keyrings exists
  file:
    path: /etc/apt/keyrings
    state: directory
    owner: root
    group: root
    mode: '0755'
  become: true

- name: Download Docker’s official GPG key (asc format)
  get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: '0644'
  become: true

- name: Ensure Docker GPG key is world-readable
  file:
    path: /etc/apt/keyrings/docker.asc
    mode: '0644'
  become: true

- name: Add Docker repository to sources.list.d
  copy:
    dest: /etc/apt/sources.list.d/docker.list
    content: |
      deb [arch={{ ansible_architecture }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release | lower }} stable
    owner: root
    group: root
    mode: '0644'
  become: true

- name: Update APT cache after adding Docker repo
  apt:
    update_cache: yes
  become: true

- name: Install Docker Engine, CLI and Compose plugin
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
    update_cache: yes
  become: true

- name: Ensure docker group exists
  group:
    name: docker
    state: present
  become: true

- name: Add n8n user to docker group (exclusive membership)
  user:
    name: n8n
    groups: docker
    append: no
  become: true

- name: Configure Docker daemon for Unix socket only
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: '0644'
  notify: Restart Docker Service
  become: true

- name: Enable and start Docker service
  systemd:
    name: docker
    enabled: yes
    state: started
  become: true

# Images will be pulled automatically by the docker_container module when deploying containers.

- name: Ensure n8n data directory exists
  file:
    path: /home/node/.n8n
    state: directory
    owner: 1000
    group: 1000
    mode: '0755'
  tags: [docker, n8n]

# Render helper scripts and configs
- name: Render docker-entrypoint.sh
  template:
    src: docker-entrypoint.sh.j2
    dest: /docker-entrypoint.sh
    owner: root
    group: root
    mode: '0755'
  become: true
  tags: [docker, n8n]

- name: Render n8n task runners config
  template:
    src: n8n-task-runners.json.j2
    dest: /etc/n8n-task-runners.json
    owner: root
    group: root
    mode: '0644'
  become: true
  tags: [docker, n8n]

# Deploy the n8n container
- name: Deploy n8n container
  community.docker.docker_container:
    name: n8n
    image: "n8nio/n8n:{{ n8n_image_tag | default(docker_engine_version) }}"
    restart_policy: unless-stopped
    user: "1000:1000"
    published_ports:
      - "{{ n8n_port | default(5678) }}:5678"
    env:
      N8N_BASIC_AUTH_USER: "{{ n8n_basic_auth_user }}"
      N8N_BASIC_AUTH_PASSWORD: "{{ n8n_basic_auth_password }}"
      N8N_HOST: "{{ n8n_host | default('localhost') }}"
      N8N_PORT: "{{ n8n_port | default('5678') }}"
      N8N_PROTOCOL: "https"
      N8N_DOMAIN: "{{ n8n_domain }}"
      N8N_LOG_LEVEL: "{{ n8n_log_level | default('info') }}"
      N8N_LOG_OUTPUT: "{{ n8n_log_output | default('console,file') }}"
      N8N_LOG_FILE_LOCATION: "{{ n8n_log_file_location | default('/var/log/n8n/n8n.log') }}"
      N8N_LOG_FILE_MAXSIZE: "{{ n8n_log_file_maxsize | default('50') }}"
      N8N_LOG_FILE_MAXCOUNT: "{{ n8n_log_file_maxcount | default('60') }}"
      GENERIC_TIMEZONE: "{{ dns_locale_timezone | default('Europe/Prague') }}"
      DB_TYPE: "{{ n8n_database_type }}"
      DB_POSTGRESDB_HOST: "{{ n8n_database_host }}"
      DB_POSTGRESDB_PORT: "{{ n8n_database_port | string }}"
      DB_POSTGRESDB_DATABASE: "{{ n8n_database_name }}"
      DB_POSTGRESDB_USER: "{{ n8n_database_user }}"
      DB_POSTGRESDB_PASSWORD: "{{ n8n_database_password }}"
      WEBHOOK_URL: "{{ n8n_webhook_url }}"
    volumes:
      - /home/node/.n8n:/home/node/.n8n
      - /docker-entrypoint.sh:/docker-entrypoint.sh:ro
      - /etc/n8n-task-runners.json:/etc/n8n-task-runners.json:ro
    entrypoint: ["tini", "--", "/docker-entrypoint.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
    platform: "{{ n8n_docker_platform | default('linux/amd64') }}"
  tags: [docker, n8n]

# Handlers
- name: restart docker
  systemd:
    name: docker
    state: restarted
  become: true
